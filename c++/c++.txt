C++ - It is a object oreiented language and it also supports procedrural programming.

Basic 

#include <iostream> - direcitve<header file Name>(similar to library containing basic functions processed by pre processors)

-Basic layout

using namespace std; - 
int main()
{

//code
return 0;
}

Important 

-<<endl  - It is a function used to breakline. 
-pow(no,power) - It is a standard library function (#include <cmath>) used to find no raised to a certain power.
-sqrt(no) - It is a standard library function (#include <cmath>) used to find the square root of a given no.
-sizeof() - It is a function that gives the size of a particular variable or array.
-#include <bits/stdc++.h> - It includes all header files present at once.
-max(no1,no2) - returns max out of the two functions.
-min(no1,no2) - Returns the minimum no of the given no.
-abs(no) - returns the modulus value of the no.
-swap(variable1,variable2) - Function used to swap values of two variables.
-Variables 

Datatype VariableName;

-Data Types 

 Primary                 Derived     User Defined
 
 integer                 function        class
 character                array        structure 
 Boolean                 Pointer         Union
 Floating point          Reference        Enum
 Double Floating Point                   TypeDef
 Void 
 Wide Character 
 string 


Note : << - Extraction operator(it extract data enter by user from console or input screen to some storage location identified by variable) , >> - Insertion Operator(it insert data from some variable or stream to the console)
 
Output function 

cout << "Message" ; 

Note:In order to print a variable or another Message with the Message within a cout we use Extraction Operator. Ex -  cout<<"The first no is "<<a ;(here a is varable)).

Input Function 

cin >> Varible Name;

Note:In order to take input in multiple variables in a single time we use insertion operator  



-Operators 
1.Arithematic Operator - + , - , * , / , % , ++ , -- 
2.Relational Operator(Return type boolean) - == , ! , > , < , >= , <= 
3.Logical Operator(Return type boolean) - &&(Logical AND), ||(Logical OR) , !(Logical NOT)
4.Assignment Operator - = , += , -= , /= , %= 
5.Bitwise Operator - `(Bitwise Complement),<<(Left Shift) ,>>(Right Shift) 
6.Misc Operator -sizeof()(gives size of variable), Ternary Operator(condition?Expression1:Expression2), Comma Operator(,),Dot and arrow operator (.,->) ,Casting Operator (Datatype to be conver in),&Address Operator(&) ,*Pointer Operator(*a) 
7.Unary Operator - These are operators that operate on single variable. E.g. - +, -(to assign a no is negative or positive ) , ++ , -- ,!


Conditionals                    
 
1.If - statement -
 if(condition){
//code
}
else if (condition){
//code
}
else{
//code 
}


same as in c as well in java.

-Function

Block of code executed when it is called within the main function.

Note: 1.In c++ the functions are declared and defined before/above main function only.(In order to overcome we use function prototype)(Same as declaration and intialization process within c.)
      2.We can make multiple functions with same name but they should have different parameters.(function oveloading)

syntax

ReturnType FuntionName(Parameters){
//code
}


-Function Protoype 


If we want to define a function after the function call,we need to use the function prototype.
Basically we declare the function first and then define it after main function or the function in the the particular function is called.

Scope of variable - It is part of the program from where the variable is accessible.

-Types of scope 

1.Local 
2.Global 

Note: If there is a variable with Global and a variable with local scope both of same name so local variable will have have more priority and in order to access the global variable we use (::)Scope Resolution Operator. 
 

Actual Parameters - The parmeters which is passed at time of function call.

Formal Parameters - The parameters that is passed during function defination.(Giving name to paramter at function declaratration).

Pass by value - Parameters values are copied to another variables.

Pass by Reference - Parameter values are passed itself.( & operator is used along with variable name)
 

Default Parameter Value - It is a value in the function declaration automatically assigned by the compiler if the calling function does not pass any value  to the argument .
                          Just assign the value of the parameter at time of declaration within the parameter block,if value is not passed expicitly then the assigned value is assined to the variable.
                          If you assign a default parameter,then the preceiding parametrs also need to be defaultised or it will give an error.



  
-Array 

Data Structure that stores a collection of homogeneous items.

syntax 

Datatype Arrayname [size] = {value};

Types 

1.Single Dimensional  -Having single row.
2.Multi - Dimensional - Combination of rows and coloumns.
syntax

datatype arrayname[row][coloumns];

-Traversing the array ways 

-For loop - 
Syntax 

for(intialiazer ; condition ; updation){
//code
}

NOTE: You can achieve multiple initializer, condition, updation within same for loop by the help of comma operator.

-For each loop - It traveses each and every element of the array one by one.It returns the value of the each element  in a newly made varible (need to be initialised at time of writing parameters).

syntax 

for( Datatype ReferenceVariableNameForTravesringvalue: ArrayName){
          //code 
}

Note: If we want to take input within the array by help of for each loop we have to use & operator at time of variable initialisation in order to store the value in the array.
       for( Datatype &VariableName : ArrayName ){
         cin >> VariableName;
        }

concept: Array Manupulation,Query(various inputs) given by user make a frequency array
-Vectors 

It is a Dynamic Array with contiguous memory allocation present in vector header file,which could resize when we want to insert or delete an element.
The size of the vectors keeps on increasing by ( 2^size) automatically as the th elements are added, known as capacity.(capacity >= size)
Syntax
1.Declaration
vector<datatype> vectorName(size);

2.


Functions/operations within vector
1.VectorName.size(); - It is a function which returns the size of the vector.
2.VectorName.resize(); - It is used to resize the vector.
3.VectorName.capacity(); - It is used to find the vector capacity.
4.VectorName.push_back(elements); - It is used to insert elements from the 0th index or from the nth index.
5.VectorName.insert(Position,element); - It is used to insert an element at particular position with respect to the first element.use (-ve) sign to insert elements from backward position.
6.VectorName.pop_back(); - It is used to remove the bottom most or last element from the vector.
7.VectorName.erase(position); - It is used to remove the element at a particular position with respect to first index.
8.VectorName.end(); - Gives index of last element.
9.VectorName.clear(); - It is used to delete all elements from a vector.


- Pointers

It stores the address of the variable from the memory bucket.We can extract the address of a variable with the help of (&) operator and the use of Dereferencing Operator(*) we can attain the value at the location.


syntax

Datatype *PointerName; 

- Call by reference 

When we use pointer within the parameter of the function in order to access the variable within the main function and the whole change takes place within the actual variables then the calling of funtion is reffered to as call by Reference.
				It allocates memory on the basis of the datatype and the compiler.



-Pointer Arithmetics 

-Types of Pointer 

-Wild Pointer - When a pointer is declared but not initialised.
-Null Pointer - when we intialize a variable with NULL then it is refferd to as null pointer.Runtime error occur on derefrencing null pointer.
-Dangling Pointer - It is a type of pointer that points to a memory location that is not valid.

                          ex - { int *ptr = NULL;
                                  { 
                                  int y = 10;
                                  ptr = &y;
                                  }
                                }
-Void Pointer- see c notes similar

-Memory Management 

In c++ the alloction and deallocation of memory are done manually, by the use of two opertors , (both can be overloaded):
(i) new operator - Used for dynamic memory allocation.It returns the type of pointer for which the memory was allocated and we can initialize variable at time of creation.It automtically computes the size of the data object.

Syntax 
PointerVariable = new datatype; // It returns the address of the memory allocated.

syntax for arrays
PointerVariable = new datatype[size]; // It returns the address of the first element.
(ii) delete operator - Used for deallocation of memory , once the memory is no longer required.

Syntax
delete PointerVariable;

Syntax for arrys:
delete[] PointerVariable;



The memory assigned to a program or application in a typical architecture can be divided into 4 segments :
(i) Heap - In order to access large chunks of memory, or keep variables in memory till time we want we use Heap.
(ii) Stack - Store info of function call, local variables.
(iii) Static/Global - Global
(iv) Code(Text) - Instuctions

StackOverflow - When we exhaust stack memory alloted by the compiler, it is reffred to as StackOverflow. One commom example is Bad or infinite Recursion call having a false base case leads to StackOverflow.

-Recursion
Concept of PMI( Principle of Matematical Induction).
Make a function of bigger problem into smaller problem.
#Base Case - Value of function which does not require much calculation.
#Assumption - Let the function work for smaller problem.
#Self Work - Test function for n+1 value of variable within the function.

Syntax

MethodName( N Parametrs )           | Bigger Problem
{
  
     if(haltCondition){             | Base Case
        return result;              |
     }
     return methodName(N Parametrs) | Assumption,Self Work (Smaller Problem)

}

-Concept of Euclids Algorithm

// Use Euclids Algorithm - If we subtract a smaller no from a larger no,(we can reduce the large no) but the gcd will not change.
// Gcd of (54,18) = Gcd of (36,18)
        // a , b   =      ((a-b),b)   {a > b}
// Gcd of (54,20) = Gcd of (20,14)
        // a , b   =       (b,a%b)     {a > b}

-Sorting 

Odering of elements.

-Stable Sort - Algo which does not change the order of elements with same value within sorting.
			ex - arr{1,3,2,4,3}
				after sort - {1,2,3,3,4}
				The element at index 1 and index 4 after sorting will be placed as : Index 1 element at index 3 and Index 4 element at index 3. The Precendece order is maintained after sort.
-Unstable sort - Algo which changes the order of elements with same value within sorting.

-Sorting Algorithms



-Bubble Sort(stable sorting algo) - Repeatedly swap two adjacent elements if in wrong order.The highest value element first comes at the end of the array,then repeatedly the second max ,(n-1) max comes at their right position.It is like bubbles coming up to the water surface.
						In this the the elements reach to its actual postion in a decreasing order.
						Time complexity - O(n^2)
						Space complexity - O(1) {constant}
						Can be optimised using flag to stop loop if array is sorted.
				ex - In an array [x,y,z]
					if x > y and x > Z(x is highest element)  then swap (x,y) then swap (x,z) until x comes at the end of array and same process will be repeatd for x,z.
-Selection Sort(Unstable sorting algo ) - Repeatedly find the min element in unsorted array & place it at the beginning .The lowest value element first comes at the starting of the array,then repeatedly the second min ,(n-1) min comes at their left position.
			we can sort in max order by traversing the max value in a reverse order.The elements in this sorting algo reaches its actual correct place.Less no of swaps take place as elements gets swapped if it is at the correct position.
			Time complexity - O(n^2) {in worst and best case)
			space complexity -O(1) {constant}
 	
-Insertion Sort(stable soting algo) - Divide the array into sorted and unsorted order.Repetedly place the elements form unsorted sub array is inserted in the sorted array.It is like hanging a new shirt with differnet size shirt hanger.We need to shift gradually the adjacent shirt and compare sizes and at correct position we keep the shirt.
			Used when the array is nearly sorted or few elements needs to be sorted.
			Time Complexity - O(n^2) {Best case TC - O(n)}
			Space Complexity - O(1) {constant}	


-Strings	

Sequence of Characters. These are objects of a class String in c++, not datatypes.
If we want to define string we need to include string header file.

Syntax:

string StringName = value; or string StringName("value");

In order to take input we use:

getLine(InputStream, variableName); (getline(cin, stringName));

Note: It doesnt terminates after the space character while using cin, instead terminates at Enter.

Indexing of characters in a string is similar to arrays and the nth index contains null character.In order to access a particular character within a string we use StringName[index].

- ASCII values

Every character has a numeric value attached to it. 

A - Z -> 65 - 90
a - z -> 97 - 122
0 - 9 -> 48 - 57 

In order to get ASCII value of the character we can use typeCasting.

-String vs Character array

  .It is a class        | .It is an array of char data type
  .There is dynamic Memory allocation | .There is static memory allocation 
  .no preallocated memory.            | .Unused allocated memory is wasted.
  .have inbuilt functions.            | .Faster

-Inbuit functions in string

reverse(StartingPointer, EndPointer) [TC - O(n)]

StringName.substr(startingIndex, EndingIndex); (Returns substring, and if either of values is not given then least and max val is applied)

+ operator - Helps concatinate string.

Note: s1 += s2 (s2 is getting appended after s1), s1 = s1 + s2 (Copy string created for s1, extra space for creating copy)

strcat(array1, array2) - Helps concatinate character array within array 1.

str.push_back(char) - Used to append character within a string.

str.length(), str.size() - Gives size of the string. [TC - O(1)]

strlen(charArray) - Used to get length of the character array.

to_string(integerVal) - Returns string val for the given interger Value.

sort(StarIterator, EndIterator) - Sorts array. [TC - O(nlogn * m) ]

Note: we can easily find longest similar prefix and postfix from an array of strings by comparing the first and last string only after sorting.


- Sliding Window Technique 

Used to find the longest/Shortest sequence with some sequece.

-Object Oriented Programming 

Need: Before oops we had Procedural oriented Programming, it had only functions and functions was grouped to make program and in order to access data from any one functions 
to another we needed to declare global variables and any change within the data couldnt be tracked as well as change within the datatype of the global variable leads to insability of the related variables.Data flowed freely throughtout the program.

OOPs main focus was on the data.It binds the data to the function using it. In this the program is divided into objects(data, functions).

Main program would have objects and data within the diff objects would be accessible by the function of the particular object.

Class - Fundamental unit of OOPS which is user defined datatype.It contains some data/attributes & functions/Methods. 

Objects - Variables of the type class.


Syntax:

Class ClassName{
public: //by default the attributes ans methods are private.
//Attribute 
//Methds
}

int main(){

ClassName objectName; // or by ClassName* ObjectName = new ClassName();
object.attribute/methodName; // In or case we need to use arrow operator(->) inplace of dot operator(.)

return 0;
}

Constructor : It is special type of function(with no return types and has same name as that of the class) used to intialize attributes within a class and is called when object is created.  

Types:
(i) default - When we dont pass any parmeters it is reffered to as default constructor.
(ii) Parametrised - When we pass parametrs within the constructor.
(iii) Copy - Used to initialize an object from an existing object.

-Destructor 

It is a function which is called when an object is deleted. It cannot have parameters.Its syntax is Just use tilde(~) before declaring an constructor.

Syntax:

~ClassName(){
//code
}


-Encapsulation 

It ensures binding of methods & variables together into a single unit, by which the data is only accessible from the class methods.

It also provides data abstraction/Hiding.(class - ADT(abstract Datatype)

-Abstraction

Enables us to display only essential information while hiding implementation details.

-Inhertance 

A class inherits properties of another class. The Class whose property is inherited is called as SuperClass/ParentClass and the class which inherts the properties is reffered to as child class.

-Access Specifiers & Modes of Inheritance 

(i) Public - Access in the class as well as outside the class.
(ii) Protected - Accessible in the class as well as inherited class.
(iii) Private - Accessible in the class only.

Types Of Inhertance:

(i)Single Inheritace - When there is only one child and one parent.Contructor of the parent class is called first and then the child class.

(ii) Multi - level Inheritance - when there is a super class and preceding child class.

(iii) Multiple Inheritance - When there are two parent class and a single child.

(iv) Hierarchial Inheritance - When there are multiple child of a single parent class.

(v) Hybrid Inhertance - Combination of one or more Inhertance patterns.

Note: Diamond Problem - Base class has multiple parent class having a common ancestors class.

-Polymorphism

Ability of objects/methods to take different forms.

Types:
(i) Compile Time Polymorphism: Function Overloading( Function with same name but diff parameters and either different return type), Operator Overloading 

(ii) Runtime Polymorphism : Function Overriding(Same function within the parent class and same function within the child class with the same name, parameter, returnType but different definition, by using virtual keyword before the declaration) 


-Friend Function: Non - member of the class which can access the private members of the class.

-Linked List

It is a linear data structure used to store a list of values.There is dynamic size allocation.

Terms:
(i) Node :- Blocks of memory which contains data as well as the pointer to next node.

(ii) Head Pointer - It points the first node of the LinkedList.

Types:
(i) Singly Linked List - Every node points to its successor node.

(ii) Doublu Linked List - Every node is connected to its previous & next node.

(iii) Circular Linked List - Every node is connected to its next node and the last node is connected to the first node.



EcmaScript - It is a standard that javascript is based on.It is very literal in what is allows.It is a dynamically typed language[allows to change variable type at runtime].


It can executed in browser as well as in the javascript console, and within Node.js 

It is used to build interactive web Applications.

Variables : It is a container used to store data. Its value(of Different Datatype)can be changed during runtime.

Naming Constraints: 

(i) Letters, digits, UnderScore, $ sign allowed.
(ii) Must begin with $, _, letter
(iii) Keywords cannt be used.
(iv) Case sensitive 

KeyWords to Declare variables:

(i) var - It is Used less. It is globally scoped. It can be redeclared & updated in its scope.
(ii) let - It is block scoped and cant be redeclared within the same scope.
(iii)const - It can neither be updated nor be redeclared. It is basically   used to declare a constant variable. It must be initialised during declaration.


-Primitive dataTypes
 
Set of basic Datatypes.

[NN BB SS U]
(i) NULL
(ii) Number
(iii) Symbol - Using Symbol(" ");
(iv) String - Using double quotes commas. (" ")
(v) Boolean
(vi) Bigint - BigInt("no");
(vii) Undefined

Note : By default value of variables is Undefined.
-Non Primitive DataTypes

Objects

These are key - Value pair. It can defined as 

const ObjectName = { key1 : value1 , key2 : value2, ...., keyN : ValueN }

In order to access the value we use obj[key] or obj.key .Key can or not be written in double quotes.

In order to add within an object :
objectName[KeyName] = value

-Expressions 

A fragment of code that produces a value is called an expression. Every value written literally i s an sxpression.

 Operators 

These are special symbols used to perform calculations.In javaScript operations performed provide accurate answers including decimal values.

Types: 

(i) Arithmatic - +, -, / , * , a ** b(Exponetial operator - Gives power of a no , a - no, b - power), %, ++, -- 

(ii) Assignement Operator - +=, -=, *=, /=, %=, **=

(iii) Comparison Operator - >, <, == (checks for only value is equal, not for type), != (checks for only value is not equal, not for type), === (equals to and type), !== (not equal value & not equal type), >=, <= , ?(ternary Operator)

(iv) logical Operators - &&, || , !

(v) Bitwise Operator - &, ||, !, ^, << , >> 

(vi) typeof Operator - Used to get datatype of variable.








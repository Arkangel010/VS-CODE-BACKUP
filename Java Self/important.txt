important
static
-static block

-always keep variable part on lhs and assigned value on right side.(variable = assigned value;
-variable scope: It is the place until which the varible is accessible. its values is accessible within the start and end point of curly braces.

-important exercises
:create program to print reverse of a no.


inheritace
-super-6:27:55

applets
-public class xyz extends applet 
-11:05:52

-for viewing within html or applet
-11:21:38

graphics class
-replace draw with fill within syntax for creating a coloured object
-12:04:04



-common mistakes
:Check for case senstivity within code (ctrl+ space within idle)
:check for semi colon
:check for syntax
:spacing
:indentation
:format
:space after every method 


-shortcuts
: ctrl+shift+s
:write main and then ctrl+space
: ctrl+shift+f
: ctrl+i 
: alt+shift+s
: alt+shift+s (generate getter setter)


-keywords
: /t - tab option: gives space equal to 4 spaces inserted after message in println "hello/t"
: /n -new line option: leaves a line inserted after message in println "hello/n"



-datatype 
:boolean [ false+false =true, True + true = True ] rest other combinations are false.

-typecasting
used to covert variables in different data types basically from smaller storage data type to bigger storage data type. it is of two types explicit(narrowing) and implicit(narrowing).
implicit data types dont require such method or ways its just called by java, explicit requires the following syntax [ datatype new variable=(required data type)predefined variable ] 



-micelaneous datatypes 
-to specify char character we assign the data in ('') courts.
-to specify long datatype we add L at the end of the data.
-use type casting to convert data to differrent types.( just add (required datatype) before the data to be converted.
-to specify float datatype we add f at the end of the data.
-to specify double datatype we add d at the end of the data.



-micelaneous operators


:ternary operators = used to compare multiple conditions witin variable and it would return the value1 when condition is true and value2 if condition is false.) 
syntax 

------------------------------------------------------------------------------------------------

Basic syntax

1.define a variable.


2.  
datatype variablename = predefinedvariable comparison operator? "value1" : "value2";
------------------------------------------------------------------------------------------------
chained syntax

datatype variablename = predefinedvariable comparison operator? "value1" : comparison operator? "value2": comparison operator? "value3";
------------------------------------------------------------------------------------------------

Example

string act= "hello";

string  prop = act == "hello"? "Hello" : "hello";
---------------------------------------------------------------------


\\the variable name should be different from perdefined variable name.
\\predefined variable refers to the varible in the first step. 
-------------------------------------------------------------------------


-Logical operators
 
Used to construct combined complex condition retuns value in boolean value.Basically used in making bank payment structures.

Types (3)
:AND ($$){all condition should be true}
syntax
codition1 $$ condition2 $$ condition3

:OR (||){at least one conidtion should be true}
syntax
codition1 || condition2 || condition3
:NOT(!)
syntax
!(codition1 comparison condition 2)
refer web

-------------------------------------------------------------------------------------
note: * using(+,-,*,\,%) before =(equals to sign) assigns the final value to the variable on LHS after calculation.(EX- Variable1 += variable2)
      *(++ ,-- ) these are increment operators which increase or decrease the value of variable by 1.




-Object creation 
classname objectname = new classname()
 
-method creation 
returntype methodname() {

}

-------------------------------
example
returntype method(){

return returntype;

}

-----------------------------
-can be called by making object(   object name.method name()  )

-void represents the return type( if returntype = void means no value return,it will just save assigned value in memory,if the return type is int,string etc. it will return the corresponding int,string etc.) 
-void is used to store value from the user and in order to take data we use int,string etc.datatypes. 



-constructor 
Special type of method used to instantiate and initialize objects.
-Contructor creation
1.it should have same name  as the class.
2.it does not have return type.
3.it is invoked using new operator 
4.if we specify a constructor the default constructor is not initiated.

accessmodifier Constructorname (){

}

note:Constructorname should be same as class name.
------------------------------------
example
public Student(){
name= "ABC";
class="12";
}

--------------------------------------------
-can be called by making object(   object name.contructor name )


-Getter and Setter method 
it is basically used for accessing private variables outside the class and setting value to it by the use of getter and setter method.

1. get - it is used to print the value.
2. set - it is used to assign value to the private variable.

Basic syntax

1.assign the private variable.
by- private variablename;

2. use the syntax

public int getvariablename() {
		return variablename;
	}
	public void setVariablename(int variablename) {
		this.variablename = variablename;
	}

3. assign value in main method in set method.
4. use get method to print assigned value.
--------------------------------------------------------------------------


-IF STATEMENT
It is a statement used in decision making conditions within single loop.else block is not required if no other codition is to be executed regardless of the condition in if block.

syntax

if(condtion){
satements;
}
else{
statement;
}

-else IF STATEMENT
IT is a loop used in order to check multiple conditions within a single loop by the use of elseif.we can use as much else if as much we want.

syntax
--------------------------------------------------------------------
if(condtion1){
satements;
}
else if(condition2){
}
else if(condition3){
}
else{
statement;
}

--------------------------------------------------------------------
note:else block doesnt have a condition.and if not required leave it blank.





-switch statement 
it is used as decision making statement within java.In this variable name is compared with the case name and it matches then the corresponding case would be executed.The break command is used to exit the loop
and if its is removed then a series of codes persuading cases along with the default case will be executed and if no such cases match the variable name the default case is executed.

---------------------------------------------------------------------------------
syntax 



switch (variable) {
  case c1:
        statements // they are executed if variable == c1
        break;
  case c2: 
        statements // they are executed if variable == c2
        break;
  case c3:
  case c4:        
        statements // they are executed if variable ==  any of the above c's
        break;
  
  default:
        statements // they are executed if none of the above case is satisfied
        break;
}

--------------------------------------------------------------------------------------------


-while 
it is a sort of loop in which the statement is first checked and executed until the codition is true.it is basically used by specifying variables and using them with comparing operators as well as assignment operators within conditon.

syntax
------------------------------
while(condition){
 statement;
}

---------------------------

-Do while 
it is a sort of loop in which fist do block of statement is executed and then condition is checked given in while block and again do block statement is executed.It is basically used by specifying variables and using them with comparing operators as well as assignment operators within conditon.


syntax
--------------------------------
do{
statement
}
while(condtion); 
--------------------------------------


-for loop
it is a sort of variable in which variable along with condition,change is implemented within the for statement(not neccessary for variable).


syntax

for(variable;condition;change){
statement
}

-nested  for loop 
it is a loop within a loop.fist the outer loop is executed and then the inner loop is executed until it completely stisfies its condition,after that the again the outer loop is executed and same process  goes on.
it is basically used for printing increasing no of outputs(ex - multiplication table) by the use of coditions.

syntax
--------------------------------------------------

for(variable;condition;change){

for(variable;condition;change)

statement

}
---------------------------------------------------






-Array



In order to store multiple values of the same data type within in a single type of variable we use array(in stores data in a tabular form).Iis prefferd for data  organisation and mangement.

-------------------------------------------------------------------------------------------------
syntax to create 1d(only one type of data) array(data to be given afterwads)

datatype[] variablename = new datatype[NO elements required to be given within the same variable];

1.syntax to write data at time of creation
datatype[] variablename ={data1,data2,data N}
                         

2.syntax to write\update data

3.syntax to declare an array.
datatype[] variablename;

variablename[] = data ;

syntax to access array

variablename[index of data];

4.syntax to take input within array through constructor.

a. make an array through array initiallization.
b.use within costructor( datatype[] arrayname )
c. add this.arraycreatedabovetheconstructor = arrayname;
d.while taking input within main method use this in constructor (new long[]{value1,value2})

------------------------------------------------------------------------------------------------
note: 1st ([]) acts as a row whereas 2nd([]) acts as a coloumn.In order to acces all arrays at a time we use the enhanced for loop.
syntax to create 2d(two type of data) array

1.syntax to write data at time of creation
int [][] variablename = {
                            {data1,data2,data N},
                            {data1,data2,data N},
                            {data1,data2,data N}
                         };

2.syntax to create 2d array(data to be given afterwads)
datatype[] variablename = new datatype[No of arrays needed][NO elements required to be given within the same variable];

3.syntax to declare an array.(it is used at times of performing operations)
datatype[][] variablename;


syntax to access or update array
variablename[array no][element no] = data;


syntax to access array
variablename[array no][element no]
------------------------------------------------------------------------------------------------------
note: for performing operations(=,-, etc.) on array simply create a new array with same no of elements and asssign simple operations to it.(the operation process is same as in matrix.)
    :- new array[][] = old1 array[][] + old2 array[][]
    :dont give space between [] and datatype.


-super keyowrd
used to call parent class variable,constructor,method while using inheritance.

syntax for calling variable 
super.variablenamefrom parent class;
-------------------------------------------------------------------------

syntax for calling constructor
1. create child class constructor.
2.In the child class constructor insert 
super(enter fiels defined within the parent class constructor);
--------------------------------------------------------------------------
note: parent class constructor will automatically be initiated within the child class as default constructor.

syntax for calling method
1. create child class method.
2.In the child class method insert 
super(enter fiels defined within the parent class method);

--------------------------------------------------------------------------
note: it is basically used for method overriding.



Final keyword
It is a type of modifier basically used to avoid other users to make changes or override within variable,method or a class.It is used with variables (final variablename ),method (final methodname(){}) to avoid overriding,class (final classname{}).


-Variable arguments
It is a method to take multiple values at a same time when the no of inputs are unpridictible for a certain method or constructor.In this we create a 1D array and take values withhin the array.
-----------------------------------------------------------------------------------
syntax 

returnType method/constructorName (datatype ... arrayname){
}

------------------------------------------------------------------------------------
note: if using multiple values along with vararg keep the vararg at the end of parameter.We can use only one parameter at a time.


Enumrated datatype
It is a sort of  datatype used to assign constants with double value.Its common name is enum.It creates a constant of the form final static constant.while using enum if we dont extend enum class java automatically does it.
--------------------------------------------------
syntax

1. create an enum class.
 enum class{
}

2.create a enum body containing constants
 enum datatypeName {
constant1(2nd value for constant1 ),constant2(2nd value for constant1),constant3(2nd value for constant1);

}

3.create a variable
accessModifier datatype variableName;

4.use datatype.constantName to access the constant.


----------------------------------------------------------------------------------------------
note: datatypeName is not equal to(int,char,double etc.) it can be the name as per our requirement or with the reference of the topic.
-----------------------------------------------------------------------------------------------------------------
1. create an enum class with double value.
 enum class{
}

2.create a enum body containing constants
 enum datatypeName {
constant1(2nd value for constant1 ),constant2(2nd value for constant1),constant3(2nd value for constant1);
private int value;
private datatype(int value) {
   this.value = value;




}

3.create a variable
accessModifier datatype variableName;

4.use datatype.constantName to access the constant.
5.in order to print all the constants at a time use
for(datatype variableaname : datatype.values())
-----------------------------------------------------------------------------------------------------------------
note: datatypeName is not equal to(int,char,double etc.) it can be the name as per our requirement or with the reference of the topic.
---------------------------------------------------------------------------------------------------------------------

-abstract class 
A class with an or many abstract method(method with parameters and no defination),variable and concrete method(defined method ) is considered as abstract class and in order to extend or implement the abstract class we need to override the abstract method in abstract class.we cannot create an instance object of abstract class.we can extend only 1 abstract class at a time.

method to create abstract class
1. add abstract keyword before class.
2. add an abstract method or a variable.(just add abstract keyword before a method or variable ).

method to override an method while extending or implementing 

syntax
-----------------------------------------------------------------------------------------------------------------
@override
accessModifier methodName (parameter){
}

---------------------------------------------------------------------------------------------------------------
note: method name along with accessModifier,parameter should be same as in the abstract class and also add @override just above the method.
----------------------------------------------------------------------------------------------------------------------------------------------

-Interfaces
These are  blueprint of a class with only abstract methods,static variables and every method created within the interface carries public final accessMofifier while static variables carry public static final accessModifier.In order to use the interface class we use implements keyword after classname within the corresponding class.We need to override the methods within the implemented class.Its instance object canbe created. one 
interface can extend other interface by use of extend keyword and add more abstract methods within that known as interface inheritance.


method to create interface class
1. add interface keyword before class.
2. add an abstract method or a variable.

-Package 
It is an organised collection of classes and interfaces.In order to put a class within a package we add at the top before the class the syntax( package packageName;).In order to access the packages within other class we use the syntax (import.packageName.className)in place of className we can use * to access all the classes.
do read about protected access modifier and other access modifier.





-Some predefined class

-wrapper class
As we know that java is a object oriented programming language and datatypes like no are not objects so in order convert it into object we used to create object explicitily before java 1.4 
after java 1.5 autoboxing and unboxing came in java 1.5 which automatically converted primitive data type to object and vice versa through the help of predefined methods of wrapper class.



-string class
It is class with methods to override or update a string but it is a immutable form to do so which makes it memory wasting process.some important methods: indexof(),substring(),append(),getchar()
In order to use it for make an object with string class name.



-string Builder 
It is an efficient and mutable form of datatype which helps in memmory saving .some important methods:reverse(),toString()
In order to use it for make an object with stringBuilder class name and insert the string within the parameter.


-console class

It is basically used to hide data and make it more secure,basically it is used to take data like passwords and store it by hindind on a specific hashspace with a unique hasdcode.


-Exception
Any unwanted or abnormal termination of program due to an error\mistake wintin the program which can be handeled is known as exception.

-Exception Handling

there are 5 ways to handle error 

1.Try and catch block : we add the statement which can cause an error within the try block and the respective steps to deal  method with the error in the catch block.

2.finally block : Its a block which is excuted regardless an error is present or not within a program.

example:
---------------------------------------------------------------------------------------------------------------------------
class ExceptionDemo {

	public static int divide(int a,int b) {
		return a/b;
	}

	public static void main(String[] args) {
		try {
			divide(9,0);
		} catch (ArithmeticException exception) {            //in the parameter of catch we pass the exception name with a refrence variable and if we use Exception  with a refrence variable it will handle all sorts of exception an we can use multiple\chaining of multiple catch block if multiple exception exist within the catch block and we have to specify multiple handling methods for each exception and keep the catch block with Exception parameter at last of the chain. 
			System.out.println(exception);
			//exception.printStackTrace();
			//System.out.println(exception.getMessage());
			//System.out.println(exception.toString());
		}
          finally  {
            System.out.println("Inside finally"); // it will be executed whatever the situation is.
        }
	}
}

-------------------------------------------------------------------------------------------------------------------------------------------


3.throw: It is used to create a desired error and it is used with the try catch block where, the catch block parameter is specified with the desired error name and witin the catch block the statements to deal with the exception is written. 

class ExceptionDemo {

	public static int divide(int a,int b) {
		return a/b;
	}

	public static void main(String[] args) {
		try {
			divide(9,0);
			throw new divisiorException ("invalid divisior")
		} catch (divisiorException exception) {          //in the parameter of catch we pass the exception name we created using throw keyword with a refrence variable.
			System.out.println(exception);
			//exception.printStackTrace();
			//System.out.println(exception.getMessage());
			//System.out.println(exception.toString());
		}
          finally  {
            System.out.println("Inside finally"); // it will be executed whatever the situation is.
        }
	}
}





4.throws:It is used to call the method from which the error is generated

5.user defined exception: In this programmer creates a class which extends the Exception class and specifies various desired exceptions throw a method or within a constructor.


6.assertion:it this we use 2 expressions in which the first expression is a boolean type and second expression is a return type which returns certain message.The useful property is that,we can enable or disable assertion accordind to our need within the run cofig.If the 1st expression is true the program continues normal execution ,where as if the expression is false the second expression is executed and exception is thrown.
Note: by deafault assertion is disabled witin the jvm.

syntax 

assert expression1 : expression2;
note: expression1 is a boolean and expression2 is a return type which has to  return message and changing value of variable through expression2 is not considered.


-Generics(<>)
It is used to overcome the problem of typecasting and to implement the strict typechecking at the compile time only, when we require datatype according to our need in a particular situation. In this we create a class with datatype and use it within some method, and then within the main class we create an object of the generic class with the required datatype and access the methods in order to print. 
There are some convention datatype we use : E (element), T (type), K (key), N(number) and V (value) 

-----------------------------------------------------------------------------------------------------------------------------------------------------------------
Example 

1.create a class with generic datatype and method.
public class SimpleGeneric<T> {     //T is the datatype here which we r gonna use within the whole class and will be changed according to our need within the main class with given generic type in the main class while calling the instance object of the generic class.
	private T obj;
	T showObjectType(T obj){
		System.out.println("The "+obj.getClass());
		return this.obj;
		
	}
	
2. In the main class while we call the instance object we specify the data type  within <> and by calling the method we can get desired output

public class Test {
	public static void main(String[] args) {
	SimpleGeneric<String> ho = new SimpleGeneric<String>(); \\In place of String we can use desired datatype and create method according to it reffrered to as generic values.
	ho.showObjectType("hi");
	
	}

	

}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



-collection Framework 
As we know that while using arrays we dont have such functions as soting,adding,removing,changing index of data especially when we are dealing with big data to overcome these situations java has some predefined class which fall under collection framework and help us to do so.
It is of three types: 1.List(interface) , 2.set(interface) , 3.
some of the predefined classess are 


-List: It is a type of interface in which we can input data with or without similar values.It has two types :-


-Array list
It is a type of list interface which allows the random access ,addition and removal of elements.
--------------------------------------------------------------------------------------------------------------
syntax 


1.Create an instance object with required datatype within the generics 
  ArrayList<String> al = new ArrayList<String>();    \\ al refers to list reference name and <> is called generics and it used to use desired datatype.

2.use reference name with add method to add element
	al.add("ramesh");
note: access ctrl + space to access various methods 
 --------------------------------------------------------------------------------------------------------

-Linked List 
It is a type of list interface which allows the random access ,addition and removal of elements,sequential access from the back and front.
-------------------------------------------------------------------------------------------------------------------
syntax

1.Create an instance object with required datatype within the generics 
 LinkedList<String> ls = new LinkedList<String>();     \\ ls refers to list reference name and <> is called generics and it used to use desired datatype.

2.use reference name with add method to add element
	al.add("ramesh");
note: access ctrl + space to access various methods, some extra features : addfirst(), addlast()

------------------------------------------------------------------------------------------------------------------


-Set: It is a type of interface in which we cannot store data with similar value,it uses hashcode methods for detecting duplicates.

-Hashset
It is a type of set which stores values in a random order and proper indexing is not assured according to the input.

syntax
----------------------------------------------------------------------------------------------------------------
1.Create an instance object with required datatype within the generics
 Set<Integer> l = new HashSet<Integer>();

2.use reference name with add method to add element
	l.add("ramesh");
note: access ctrl + space to access various methods

----------------------------------------------------------------------------------------------------------------------


-LinkedHashSet
It is a type of set which stores values in a sequential manner according to given input with proper indexing.
-------------------------------------------------------------------------------------------------------------------
syntax
1.Create an instance object with required datatype within the generics
 Set<Integer> l = new LinkedHashSet<Integer>();

2.use reference name with add method to add element
	l.add("ramesh");
note: access ctrl + space to access various methods
----------------------------------------------------------------------------------------------------------------

-Treeset 
It is a type of set which stores values in a accending order of indexing.
----------------------------------------------------------------------------------------------------------------
syntax
1.Create an instance object with required datatype within the generics
 Set<Integer> l = new TreeSet<Integer>();

2.use reference name with add method to add element
	l.add("ramesh");
note: 1.access ctrl + space to access various methods
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	2.All the set dont store any duplicate values.
	3.If we print the add method in all collection interface it will give us a boolean value true when the value is added within the set and if the value is duplicate it will return a false value.
	4.Remember to import the corresponding interface in order to use the collection.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


-Map
It is a sort of collection in which values are stored according to keys instead of indexes.It has two generic values <K,V> where K stands for key and V stands for the value.
E.g. If we store data within a set or array we can access it by use of index but in Map it can be accessed by the use of given particular key values given to the value which makes it easier for user interface.

-HashMap
similar to Hashset here also data is stored in a sequential manner as per the given input.

syntax

1.Create an instance object with required datatype within the generics
 Map<KeyDataType><ValueDataType> k = new HashMap<Integer>();  
2.use reference name with add method to add element
 k.put("Name","Ramesh");  //Name is the key for Ramesh and in order to access Ramesh we have to use key value.

note:1.access ctrl + space to access various methods.If we add element with same key another time the value inplace of first value gets updated according to the second value.
----------------------------------------------------------------------------------------------------------------

Iterator 
It is an interface used to print the various elements of the various collections by first taking the input of the particular collection and then using sevaral methods like hasnext(),next(),hasprevious(),previous() to print the desired element.
==============================================================================================================
syntax

1.create an instace to import all the data of the particular collection to iterator collection,
 CollectionNameIterator<DatatypeOfCollection> i = ReferanceNameOfCollectionWhoseElementsAreToBePrinted.CollectionNameIterator();


2.use hasnext() as expression in while statement and sysout with next() in while block to  print the collection in forward direction.
 while(i.hasNext()) {
			System.out.println(i.next());
		}

3..use hasPrevious() as expression in while statement and sysout with previous() in while block to  print the collection in reverse direction.
 while(i.hasNext()) {
			System.out.println(i.previous());
		}


------------------------------------------------------------------------------------------------------------------
note:Iterator is just used to print the elenents it cannot make changes within the collection,for that we will use only the methods in the collection itself an will have repeat the process of importing the collection or it will throw an error.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------

-Date Time API

It is basically used when we have to deal with time and date within our program.It has  interfaces like local date,local time ,local date Time,ZonedDateTime(it is used to get specified foreign time),Period(it is used to compare basically individually  between  days ,month ,year),DateTimeFormatter(as java gives date in the format of yy\dd\mm but in real life we write date in the format of dd\mm\yy so in order to obtain it we use .ofPattern() to obtain desired result) (as per name the functions are work mostly except some).
--------------------------------------------------------------------------------------------------------------------------------------------------------

syntax

1.import local date interface 
import java.time.LocalDate;  \\In place of LocalDate we can use LocalTime\LocalDateTime as per our requirement.

2.Instantiate the local date object
LocalDate date = LocalDate.now();   \\In place of LocalDate we can use LocalTime\LocalDateTime as per our requirement. And the .now() method gives us the current date as per system data.

3.use various methods to met your requirement.some of important methods are : adding days to the current date,substracting days from the current date,compare two dates,use .of() method to specify a custom date.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Note: In order to take date as input we have to specify the parameter with LocalDate Datatype. And for giving input within the main method make an object of LocalDate Object and use the .of() method to pass the date.
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Example

LocalDate date = LocalDate.now(); \\returs current date in the format yy\mm\dd
LocalDate yesterday = date.minusDays(1);  \\returns date after substracting days from current days.

LocalTime startTime = LocalTime.now();  \\returs current time in the format ss\mm\hh
LocalTime endTime = startTime.plusSeconds(1); \\returns time after adding sec to current time.

LocalDateTime dateTime = LocalDateTime.now(); \\returs current date and time.
System.out.println(dateTime.minusDays(3));   \\returns date and time after substracting days from current date and time.

System.out.println(ZonedDateTime.now());  \\returns the current date and time with zone.
System.out.println(ZonedDateTime.now(ZoneId.of("Europe/Athens"))); \\returns the current date and time with zone specified.


public static long calculateLOPs(LocalDate startDateLOP, LocalDate endDateLOP) {  \\used to compare
        Period period = Period.between(startDateLOP, endDateLOP);
        int lops = period.getDays();
        return lops + 1;
    }


DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MMM/yyyy"); \\changes the format to specified pattern.
System.out.println(paySlipDate.format(formatter));\\Prints the date as per pattern.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
doubt in :choronoUnit



------>  How to use a class as a datatype and take input of data within the parameter <----------

1.Create a class and Specify the variables within that.(the varibles will act as a store point within the class.
2.Specify the varible within the constructor with the input parameter.(use this keyword to store  the values within the variable.)
3.Now in place of datatype you can use the specified className as a  datatype.
4.In the main method you can give input to the variables by instantiating the object witin the main class and in the parameter specify the input (as we do so while using constructor for input).
5.Use the refrence varible of object created to give the input within the specified method parameter.(method in we used the ClassName as a datatype).

-Appendix(calender) API

It is used to deal with days,month,year .
--------------------------------------------------------------------------------------------------------------------------
syntax

1.import calender interface
import java.util.Calendar;

2.Instantiate the calender object
Calendar cal=Calendar.getInstance();//Create Calendar

3.use different methods to meet your requirement
 System.out.println("Current Date is\t:" + cal.getTime() +"\n");//print current date
            cal.set(1992,0,1);//set the date to 1st Jan,1992
            System.out.println("Date after 1st modification\t:" + cal.getTime() +"\n");
            cal.add(Calendar.MONTH,3);//add 3 months
            System.out.println("Date after adding 3 months\t:" + cal.getTime() +"\n");
            cal.add(Calendar.YEAR,-3);//subtract 3 years
            System.out.println("Date after subtracting 3 years\t:" + cal.getTime() +"\n");

---------------------------------------------------------------------------------------------------------------


-Scanner class
It is used to take input from the user within the console.

syntax

1.import the scanner class within the io class.
import java.util.Scanner;

2.create instance for scanner class
Scanner myObj = new Scanner(System.in);  // Create a Scanner object

3.use the refernce variable to use various methods to take input  within scanner class and store  the input in a varible.

----------------------------------------------------------------------------------------------------------------------------
Example

import java.util.Scanner;  // Import the Scanner class

class Main {
  public static void main(String[] args) {
    Scanner myObj = new Scanner(System.in);  // Create a Scanner object
    System.out.println("Enter username");

    String userName = myObj.next();  // Read user input for single word
    int no = myObj.nextint();  //in place of nextint() we can use nextdouble() or the required datatype we r gonna take input. Just change the datatype after next.
    myobj.nextLine(); \\ If we dont add this it would not store the input data for feedback varible and exit the program.
    String feedback = myObj.nextLine()://
    System.out.println("Username is: " + userName);  // Output user input
  }
}
-----------------------------------------------------------------------------------------------------------------------------------------
Note: while using nextline() method be carefull. when we want to use the method  it reads the next line as a whole and if we use this method after taking input for string after some int,double etc. add ScannerObjectVariableName.nextLine(); before the input line  or it would not take input.

- Version Control System- Way to maintian a record for the backup,collaborate,Multiple Versions,Accidental delete etc. It is a system that records changes to a file or set of files over time so that you  can recall specific versions later. These versions are recorded in repository and can be recalled from the same.There are Local ,Centralized , and Distributed VCS. 

-Uses

1.Tracking code changes.
2.Tracking who made changes like history of the files.
3.Coding Collaborations. 
4.Rollbacks 
5.Reduce Downtime 
6.Analyze Project

-Types of Version Control System
1.Centralised Version Control System - A common repository is provided by a company and after the commit the other team memebers within the repository can access the file.In this a networking system is required in order to establish a connection between two users and the files are stores a single repository , any problem within the repository would lead to huge data loss.

2.Distributed Version control System - A local as well as actual/main/remote repository is created , and when we are done with the task the files are pushed into the local repository and from the local repository it is commited to the actual/main/remote repository and others dont have access to the local repository.


Git - It is a popular Distributed version control system.Most common used version control tool - Git,made in - 2005 by Linus Torvalds.It helps in managing your source code history, installed and maintained in your local system.It is a TOOL.

GitHub - It is a hosting service for Git repositories, Exclusively cloud - based. It is the service for the projects that use Git.It is web - based Git repository hosting service.


GIT Features:
-Economical 
-Non Linear
-Snapshots
-Distributed


-Repository - It a specified storage on github which allows us to storage ,specify the acesssibility of codes within a team and provide a security to our code .
Commit -  Keeping files from local system to a remote sytem(Repository) is known as commit.


 
Branch - Multiple copy of the same project in order to make the project accessible to multiple people at the same time.Every branch is independent of changes done within the other branch. It is an Integral part of any Version Control System. Unlike other VCS. Git does not create a copy of the existing files for new branch . It points to snapshot of the changes you have made in the system.It is used for Paralell Development.

Types of Branch :
-Master Branch - It is the actual file.It is the Production specific code.
-User created Branch - It is the copy the of the master branch and changes within the User Branch will not affect the Master Branch.It is testing specific code.


Types of status of files :(Do see the screenshot)

-Untracked - File which havent been uploaded to the cloud.
-Staged - File which are uploaded to the cloud but not  been commited(or basically is in edit mode).
-Unmodified - Intial committed files are reffered to as Unmodified files.
-Modified - After commit editing the files is reffered to as Modified status.

Commit - Records changes to one or more files in your branch.Git assigns each commit a unique ID, called a SHA or hash , that identifies : The specific changes. 

command  for gitbash 
clear - To clear the Terminal.
ls - Shows files tracked by your Repository.
touch FILE_NAME - Used to create blank file.
touch .gitignore - Used to stop log files, cache file to the server, in order to reduce server traffic & memory usage.It basically creates a file in the working directory of extension .gitignore in which we write the file name which need not to be uploaded to the cloud.

git config --global user.name NAME - Used to set name of the user & To check whether it is  set or not.

git config --global user.email USER_EMAIL - Used to set the user Email & To check whether it is  set or not.

git init - Used to intialize a Empty Repository.
git init - starts the git /intialize the git 
git clone REPO_NAME - create a copy of orginal Repository on Local Machine 
git fork REPO_NAME - create a copy of orginal Repository on Github Account. 
git remote add origin<repo _ link> - Used to add remote Repo Link in which we want to add Local Repo or file to the cloud.
rm -fr .git - Delete a Repository

git pull - Used to copy updated master Branch From Remote Repository to Local Machine.
git push - Used to push local Repo to the Central Repo.
git status - to check that repository contains a file 
git status -s - Used the get a shortHand status of the file.
git add - to add a file 
git add -A  - To add multiple files within the staging area.
code . - to open Visual studio
git commit -m "Messege" - To commit the added file 
git log - shows the commits done 
git log -p -N_PREVIOUS_COMMIT - used to get previous commits.
git show commitId - To se the change the file.Commit Id is got from the log command.(EX - commit 240e60e3a0c7e5026e0ce8931c7b97a4b577c319)

git checkout - Used to reverse the last commit or switch between simultaneous branches.
git checkout -b BRANCH_NAME - Used to crete as well as switch between branches.
git checkout -f - Used to revert all files last commit.
git diff - Used to compare the previous commited file to the Edited file.It compares the commited file to the staged file.
git show COMMIT_ID - Used to show the changes within a particular commit by the use of the commit id.


git -a -m - Used to commit file by skipping the staging area.
git rm FILE_NAME - Used to remove file from the working directory as well as staging area.
git rm --cached FILE_NAME - used to remove the file just from the staging area.
git branch BRANCH_NAME - Used to create a branch 
git merge USER_BRANCH_NAME - Used to merge the User commited branch with master branch.
git rebase BRANCH_NAME - It is used when changes made in one branch needs to be reflected in another branch.

git help - Shows basic commands
git help commandName - Opens up the documentaion for the Command.
Sequence to add  a file through local 

Create file -> git add file name -> Git commit -m "Message" 

